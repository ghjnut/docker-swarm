version: '3.7'

services:
  controller:
    image: ${DOCKER_IMAGE}:${DOCKER_TAG}
    init: true
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.hostname == hansel.jaked.in]
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 0
      labels:
        - traefik.enable=false
        #- traefik.constraint-label=traefik-private
        #- traefik.docker.network=traefik-private

        # https
        #- traefik.http.routers.unifi-secure.entrypoints=websecure
        #- traefik.http.routers.unifi.service=unifi
        #- traefik.http.routers.unifi-secure.rule=Host(`${DOMAIN:?DOMAIN not set}`)
        #- traefik.http.routers.unifi-secure.tls=true

        #- traefik.http.services.unifi.loadbalancer.server.port=${LB_PORT:?LB_PORT not set}
    networks:
      - unifi
      - traefik-private
    volumes:
      - data:/unifi/data
      - log:/unifi/log
      - cert:/unifi/cert
      - init:/unifi/init.d
    environment:
      DB_URI: mongodb://mongo/unifi
      STATDB_URI: mongodb://mongo/unifi_stat
      DB_NAME: unifi

    # The Unifi-in-Docker container exposes the following ports. A minimal Unifi Controller installation requires you expose the first three with the -p ... option.
    #8080/tcp - Device command/control
    #8443/tcp - Web interface + API
    #3478/udp - STUN service
    #8843/tcp - HTTPS portal (optional)
    #8880/tcp - HTTP portal (optional)
    #6789/tcp - Speed Test (unifi5 only) (optional)

    # TODO figure out what can be safely loadbalanced
    ports:
      # Device command/control
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
      # Web interface + API
      - target: 8443
        published: 8443
        protocol: tcp
        mode: host
      # STUN service
      - target: 3478
        published: 3478
        protocol: udp
        mode: host
      - target: 10001
        published: 10001
        protocol: udp
        mode: host

  mongo:
    image: ${MONGO_DOCKER_IMAGE}:${MONGO_DOCKER_TAG}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.hostname == hansel.jaked.in]
      restart_policy:
        condition: any
        delay: 0s
        max_attempts: 0
    networks:
      - unifi
    volumes:
      - db:/data/db

volumes:
  db:
  data:
  log:
  cert:
  init:

networks:
  unifi:
    driver: overlay
    attachable: true
  traefik-private:
    name: traefik-private
    external: true
