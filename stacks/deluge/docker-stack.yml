version: '3.7'

services:
  deluged:
    image: ${DOCKER_IMAGE}:${DOCKER_TAG}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.hostname == hansel.jaked.in]
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 1
      #labels:
      #  - traefik.enable=true
      #  - traefik.constraint-label=traefik-private
      #  - traefik.docker.network=traefik-private

      #  # client
      #  - traefik.http.routers.deluged-client.entrypoints=deluged-client
      #  - traefik.http.routers.deluged-client.rule=Host(`${DOMAIN:?DOMAIN not set}`)
      #  - traefik.http.routers.deluged-client.service=deluged-client
      #  - traefik.http.services.deluged-client.loadbalancer.server.port=${LB_PORT:?LB_PORT not set}

      #  # TCP
      #  - traefik.http.routers.deluged-tcp.entrypoints=deluged-tcp
      #  - traefik.http.routers.deluged-tcp.service=deluged-tcp
      #  - traefik.http.services.deluged-tcp.loadbalancer.server.port=${TORRENT_PORT:?TORRENT_PORT not set}

      #  # UDP
      #  - traefik.http.routers.deluged-udp.entrypoints=deluged-udp
      #  - traefik.http.routers.deluged-udp.service=deluged-udp
      #  - traefik.http.services.deluged-udp.loadbalancer.server.port=${TORRENT_PORT:?TORRENT_PORT not set}

    networks:
      - deluge
      - traefik-private
    # TODO pipe through traefik
    ports:
      # client
      - target: 58846
        published: 58846
        protocol: tcp
        mode: host
      # torrent
      - target: 58946
        published: 58946
        protocol: tcp
        mode: host
      - target: 58946
        published: 58946
        protocol: udp
        mode: host
    volumes:
      # TODO move to /var/lib
      - type: bind
        source: /home/ghjnut/projects/docker/deluge/data
        target: /root/data
        #read_only: true
      # TODO move to /var/lib
      - type: bind
        source: /home/ghjnut/projects/docker/deluge/config
        target: /root/.config
        #read_only: true
    command: deluged --do-not-daemonize --loglevel info

  web:
    image: ${DOCKER_IMAGE}:${DOCKER_TAG}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.hostname == hansel.jaked.in]
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 1
      labels:
        - traefik.enable=true
        - traefik.constraint-label=traefik-private
        - traefik.docker.network=traefik-private

        # https
        - traefik.http.routers.delugeweb-secure.entrypoints=websecure
        - traefik.http.routers.delugeweb-secure.rule=Host(`${WEB_DOMAIN:?WEB_DOMAIN not set}`)
        - traefik.http.routers.delugeweb-secure.tls=true

        - traefik.http.services.delugeweb.loadbalancer.server.port=${WEB_LB_PORT:?WEB_LB_PORT not set}
    networks:
      - deluge
      - traefik-private
    volumes:
      #- type: bind
      #  source: /home/ghjnut/projects/docker/deluge/config/deluge
      #  target: /config
      #  read_only: true
      - type: bind
        source: /home/ghjnut/projects/docker/deluge/config
        target: /root/.config
        #read_only: true
    command: deluge-web --do-not-daemonize --loglevel info

# TODO make config and data into volumes

networks:
  deluge:
    driver: overlay
    attachable: true
  traefik-private:
    name: traefik-private
    external: true
